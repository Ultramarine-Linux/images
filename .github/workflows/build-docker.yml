name: Build Docker images
env:
  KATSU_BUILD_TASK_NAME: "Build image"
  DNF_PKGS: |
    git
    xorriso
    rpm
    limine
    systemd
    btrfs-progs
    e2fsprogs
    xfsprogs
    dosfstools
    grub2
    parted
    util-linux-core
    systemd-container
    grub2-efi
    uboot-images-armv8
    uboot-tools
    rustc
    qemu-user-static-aarch64
    qemu-user-binfmt
    qemu-kvm
    qemu-img
    cargo
    systemd-devel
    mkpasswd
    clang-devel
    moby-engine
    squashfs-tools
    erofs-utils
    grub2-tools
    grub2-tools-extra
    isomd5sum
    moby-engine
    podman
    buildah

on:
  push:
  workflow_dispatch:

jobs:
  #### DOCKER ######

  docker:
    strategy:
      fail-fast: false
      matrix:
        variant:
          - base/base-docker-x86_64
          - base/base-docker-aarch64

    outputs:
      artifact: ${{ matrix.variant }}
      # ubuntu-latest unless we're building aarch64
    runs-on: ${{ matrix.variant == 'base/base-docker-aarch64' && 'arm64' || 'ubuntu-latest' }}
    container:
      image: ghcr.io/terrapkg/builder:f39
      # Pass /dev from host to container
      # Very hacky, but it works
      # Microsoft/Github, if you're reading this,
      # I'm sorry.
      options: --privileged -v /dev:/dev

    steps:
      - name: Install dependencies
        run: |
          dnf install -y $DNF_PKGS
          dnf clean all

      - name: Clone Katsu
        uses: actions/checkout@v3
        with:
          repository: FyraLabs/katsu
          ref: main
          path: katsu
      - name: Build Katsu
        run: |
          pushd katsu
          cargo build --release
          cp target/release/katsu /usr/bin/katsu
          popd
      - name: Checkout
        uses: actions/checkout@v2

      - name: sanitize artifact name
        run: |
          name=$(echo ${{ matrix.variant }} | sed 's/\//-/g')

          # set github variable
          echo artifact=$name >> $GITHUB_ENV
          # get architecture
          # e.g. base/base-docker-x86_64 -> x86_64
          echo arch=$(echo ${{ matrix.variant }} | cut -d'-' -f3) >> $GITHUB_ENV
      - name: ${{ env.KATSU_BUILD_TASK_NAME }}
        run: |
          pushd katsu
          katsu --output=fs modules/${{ matrix.variant }}.yaml

          if [ ${{ env.arch }} == "x86_64" ]; then
            host_arch="amd64"
          elif [ ${{ env.arch }} == "aarch64" ]; then
            host_arch="arm64"
          fi

          # tarball katsu-work/chroot then import using podman with tag ghcr.io/ultramarine-linux/ultramarine:39
          tar -C katsu-work/chroot -c . | podman import --change='CMD ["/usr/bin/bash"]' - ghcr.io/ultramarine-linux/ultramarine:39 --arch $host_arch
          podman save --format oci-archive ghcr.io/ultramarine-linux/ultramarine:39 --output katsu-work/image/katsu.tar.xz
          popd



      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact }}-docker
          path: katsu/katsu-work/image/*.tar.xz

      #### DOCKER PUSH ######

  docker-push:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y buildah
      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      # how do i combine those two images into one multiarch tag

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Publish to registry
        run: |
          set -x
          MANIFEST="ghcr.io/ultramarine-linux/ultramarine"
          RELEASE="40"
          ls -lR
          buildah manifest create $MANIFEST
          buildah manifest add $MANIFEST oci-archive:base-base-docker-x86_64-docker/katsu.tar.xz --arch amd64
          buildah manifest add $MANIFEST oci-archive:base-base-docker-aarch64-docker/katsu.tar.xz --arch arm64
          # also tag as latest
          buildah tag $MANIFEST $MANIFEST:latest || :
          buildah manifest push --all --format v2s2 $MANIFEST docker://$MANIFEST:$RELEASE
    
  docker-layer:
    runs-on: ubuntu-latest
    strategy:
        fail-fast: true
        matrix:
            dockerfile:
                - dockerfiles/devtools.dockerfile
        
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        
        - name: Build images
          uses: docker/build-push-action@v6
          with:
              context: .
              file: ${{ matrix.dockerfile }}
              platforms: linux/amd64,linux/arm64
              push: false
              tags: |
                  ghcr.io/ultramarine-linux/ultramarine-devtools:40
                  ghcr.io/ultramarine-linux/ultramarine-devtools:latest
              args: |
                  RELEASE=40
    

  #### LIVE ISO ####